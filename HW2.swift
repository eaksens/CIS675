//import UIKit

var str = "Hello, playground"

//Problem 1: Use a while loop that computes the average of the scores in the dictionary created in problem #5 in HW #1.
var authorScore: Dictionary<String,Double> = [
    "Mark Twain":8.9,
    "Nathaniel Hawthorne":5.1,
    "John Steinbeck":2.3,
    "C.S. Lewis":9.9,
    "Jon Krakaur":6.1]

var avg: Double = 0.0
var sum: Double = 0.0
var it = authorScore.makeIterator()
var item = it.next()

while (item != nil){
    sum += (item!).value
    item = it.next()
}
avg = sum / Double(authorScore.count)
print(avg)

//Problem 2: Based on the outcome of problem #1, write an if/else statement that prints out “Low” if the average is less than 5.0, “Moderate” if the average is >= 5 but less than 7, or “High” if the average is >= 7.
if(avg >= 7){
    print("High")
}else if(avg >= 5.0){
    print("Moderate")
}else{
    print("Low")
}

//Problem 3: Write a switch statement that examines a variable named count and assigns a string variable named strOut the following values.
var count: Int = 0
var strOut: String = ""
switch count {
case 0:
    strOut = "none"
case 1...3:
    strOut = "a few"
case 4...9:
    strOut = "several"
case 10...99:
    strOut = "tens of"
case 100...999:
    strOut = "hundreds of"
case 1000...999999:
    strOut = "thousands of"
default:
    strOut = "millions of"
}

//Problem 4:  Write a Swift function named “verbalizeNumber” that takes an input parameter of type Int, and returns a String.  
//The function should utilize the switch statement written in the previous exercise to map the integer value to a verbal description. 
func verbalizeNumber(count: Int) -> String {
    switch count {
        case 0:
            strOut = "none"
        case 1...3:
            strOut = "a few"
        case 4...9:
            strOut = "several"
        case 10...99:
            strOut = "tens of"
        case 100...999:
            strOut = "hundreds of"
        case 1000...999999:
            strOut = "thousands of"
        default:
            strOut = "millions of"
    }
    return strOut
}
print(verbalizeNumber(count: 101))

//Problem 5: Write a  for loop that iterates from 1 to 100_000 where your index is updated on iteration by a step of 10. 
//In the body of the loop print out a meaningful string that is in part generated by calling the verbalizeNumber function written in problem #4. 
//var index:Int = 1
for index in stride(from: 1, to: 100000, by: 10) {
    print(verbalizeNumber(count: index))
}


//Problem 6: Write another Swift function named verbalizeAndShoutNumber that is identical to the one you wrote in problem 4, 
//only all letters in the expression returned are capitalized.  
//Note, if you research how you can capitalize a string in Swift, you should be able implement this function in a single line of code! 
func verbalizeAndShoutNumber(count: Int) -> String {
    return verbalizeNumber(count: count).uppercased()
}
print(verbalizeAndShoutNumber(count: 101))


//Problem 7: Wrap the functionality you wrote in Problem 5 as a function named expressNumbersElegantly that takes two parameters 
//– an Int value, and a function that takes an Int and returns a String.  
// The implementation of this function should do exactly what you did in 5 only:
// -iterate up to the integer value passed in.
// -call the function passed as a parameter instead of hardwiring the call to verbalizeNumber. 
// -instead of printing out text, you should concatenate it into a single string and return it to the caller.
// -Define a variable of type function that takes an Int value and returns a String.  
//Set the variable to each of the two functions (verbalizeNumber and verbalizeAndShoutNumber) and call expressNumbersElegantly each time you set it.  

func expressNumbersElegantly(max: Int, verbalizeFunction:(Int) -> String) -> String{
    var val = ""
    for index in stride(from: 1, to: max, by: 10) {
        val = val + verbalizeFunction(index) + " "
    }
    return val
}

print(expressNumbersElegantly(max: 100, verbalizeFunction: verbalizeNumber))
print(expressNumbersElegantly(max: 100, verbalizeFunction: verbalizeAndShoutNumber))

//Problem 8. Rewrite the expressNumbersElegantly function in the form of a new function named expressNumbersVeryElegantly 
//that uses external parameter names. Be sure to come up with nice external parameter names so the invocations read very elegantly! 
func expressNumbersVeryElegantly(maxValue max: Int, verbalizeFunction:(Int) -> String) -> String{
    var val = ""
    for index in stride(from: 1, to: max, by: 10) {
        val = val + verbalizeFunction(index) + " "
    }
    return val
}
print(expressNumbersVeryElegantly(maxValue: 100, verbalizeFunction: verbalizeNumber))
print(expressNumbersVeryElegantly(maxValue: 100, verbalizeFunction: verbalizeAndShoutNumber))


//Problem 9:  Given the following Swift array:
//var famousLastWords = ["the cow jumped over the moon.", "three score and four years ago", "lets nuc 'em Joe!", "ah, there is just something about Swift"]
//use the map function Array class to capitalize the first letter of each entry in the array.
//Code up the capitalization code as a closure that is passed to the map function.
var famousLastWords =
    ["the cow jumped over the moon.",
     "three score and four years ago",
     "lets nuc 'em Joe!",
     "ah, there is just something about Swift"]

famousLastWords.map({ (phrase : String) -> String in
    phrase.prefix(1).uppercased() + phrase.dropFirst()
})


// Problem 10: Fibonacci sequence
func fibobacci(Number: Int) -> Int {
    var fib = 1;
    
    if Number == 0 {
        return 0;
    }
    
    var temp1 = 0;
    var temp2 = 0
    for _ in 2...Number {
        temp2 = temp1 + fib;
        temp1 = fib;
        fib = temp2;
    }
    return fib;
}

fibobacci(Number: 10)
